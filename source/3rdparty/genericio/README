================================================================================
 1. Introduction
================================================================================

This file describes how to build the GenericIO library. It is assumed that
the reader has downloaded, the GenericIO library to a desired location, referred
as $GIODIR from here and on. The remainder of this document covers, how to build
the GenericIO library and tools using the provided Makefile (see Section 2) or
CMake (see Section 3). Last, usage of the GenericIOInspector utility is
discussed.


================================================================================
 2. Building GenericIO using the Makefile
================================================================================
On most machines, simply typing `make` within $GIODIR will work, as long as,
"mpicxx" is in the user's path. However, on supercomputers where
cross-compilation is required, e.g., Crays, BG/P, BG/Q etc. a specialized
compiler wrapper is provided that produces a binary for the target compute node.
Hence, the compiler must be explicitly supplied. This is controlled by the
environment.

The mains steps are as follows:

(i) Set GIO_MPICXX to the compiler you want to use. e.g., assuming in bash you
would do `export GIO_MPICXX=CC` where CC is the compiler you want to use. If
you don't do this `mpicxx` is used by default.

(ii) Optionally, you can specify where to build the library and utilities
by specifying GIO_OBJDIR in your environment, e.g, `export GIO_OBJDIR=/opt/foo`,
would build the library in /opt/foo. By default, the library and binaries
are built in $GIODIR/genericio.build

(iii) Last, cd in $GIODIR and type `make`

This will generate the following:
(a) $GIO_OBJDIR/libGeneric.a -- library that other code can link to
(b) $GIO_OBJDIR/bin/GenericIOInspector -- simple utility used to inspect
GenericIO files (see Section 4 for more details).
(c) $GIO_OBJDIR/bin/GenericIOVerify -- Hal?
(d) $GIO_OBJDIR/testing -- directory consisting of all the tests

================================================================================
 3. Building GenericIO using CMake
================================================================================
In CMake, we use an out-of-source build, hence, the build directory, referred
to as $BuildDir from here on, must be first created.

The main steps are as follows:

(i) Create the desired directory $BuildDir where you want to build GenericIO

(ii) cd into $BuildDir

(iii) type `ccmake $GIODIR` -- this will bring up the ncurses interface

(iv) In the ncurses interface press `c` to configure

(v) Press `g` to generate -- this will generate Makefiles and exit the ncurses
interface.

(vi) Last, type `make`

================================================================================
 4. Using the GenericIOInspector Utility
================================================================================
The GenericIOInspector utility is used to inspect GenericIO files.

Usage: ./GenericIOInspector --file <myfile> [--use-posix] [--usr-rcb] [mode]

* If the argument `--use-posix` is supplied, then the GenericIOInspector will
use Posix I/O for reading the data. By default, MPI I/O is used.

* If the argument `--use-rcb` is supplied, then the reader will distribute the
blocks that are read in using RCB, which produces spatially contiguous blocks
of data in each process.

[mode] specifies the desired action to be performed. Available options are
listed below:

--show-global-header      Shows the global header

--show-map                Shows the block distribution information if the data
                          consists of multiple files

--show-block-headers      Prints meta-information of each block in the file.

--show-variable-metadata  Prints metadata about each variable in the file, i.e.,
                          the bytesize of each variable and its name.

--blocked-data            Prints the data block-by-block with block seperators
                          consisting of some block metadata.

--data                    Prints all the data in the file in a tab-delimited
                          format.

--help or -h              Prints help information


