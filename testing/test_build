#!/bin/bash
# Author: Hoby Rakotoarivelo

# init paths
PROJECT_DIR=$(pwd)/..
SCRIPTS_DIR=${PROJECT_DIR}/scripts
BUILD_DIR=${PROJECT_DIR}/build_test
DEPS_DIR=${PROJECT_DIR}/ExternalDependencies
BUILD_OPT=""
ENV_SCRIPT=""
CLUSTER=""
COMPRESSORS=("")

print_usage() {
  echo -e "Usage: ./test_build [options]"
  echo -e "options:"
  echo -e "  -h, --help              show this help message and exit"
  echo -e "  -c, --cluster <STRING>  current cluster [darwin|cori]"
  echo -e "  -d, --deps <PATH>       specific external dependencies path"
  exit 1
}

# parse and check args
parse() {
  options=""

  # parse options (requires GNU getopt).
  if [ "$#" -eq 0 ]
  then
    echo -e "Please provide at least a cluster name"
    print_usage
  elif ! options=$(getopt -o "hc:d:" -l "help,cluster:,deps:" -- "$@")
  then
    print_usage
  fi

  # evaluate the option list
  eval set -- "${options}"

  # process args
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -h|--help) print_usage;;
      -c|--cluster) CLUSTER="$2"; shift;;
      -d|--deps) DEPS_DIR="$2"; shift;;
      (--) shift; break;;
      (-*) print_usage;;
      (*) break;;
    esac
    shift
  done
}

reset() {

  if [ "${CLUSTER}" = "cori" ]
  then
    BUILD_OPT="-cori"
    COMPRESSORS=( "blosc" "sz" "zfp" "isabela" "fpzip" )
  elif [ "${CLUSTER}" = "darwin" ]
  then
    BUILD_OPT="-all"
    COMPRESSORS=( "blosc" "sz" "zfp" "isabela" "fpzip" "mgard" "lossywave" )
  else
    echo -e "\e[31mError: wrong platform ${CLUSTER}\e[0m"
    exit 1
  fi

  if [ ! -d ${DEPS_DIR} ]
  then
    echo -e "\e[31mError: directory ${DEPS_DIR} does not exist\e[0m"
    exit 1
  fi

  # set environment script
  ENV_SCRIPT="VizAly-CBench.bash.${CLUSTER}"

  # load modules and set environment variables
  cd ${SCRIPTS_DIR} && source ${ENV_SCRIPT} &&
  # make a clean build directory
  cd .. && rm -rf ${BUILD_DIR} && mkdir ${BUILD_DIR} && cd ${BUILD_DIR}
}

build() {
  case "$1" in
    --core)
      cmake ../CBench;;
    --hdf5)
      cmake -DCBENCH_PLATFORM=${CLUSTER^} -DCBENCH_ENABLE_NYX_LOADER=ON ../CBench;;
    --all)
      cd .. && rm -rf ${BUILD_DIR} && source build.sh ${BUILD_OPT} --path ${BUILD_DIR} --DEPS_DIR ${DEPS_DIR};;
    --blosc)
        cmake -DCBENCH_ENABLE_BLOSC=ON \
              -DBLOSC_INCLUDE_PATH="${DEPS_DIR}/c-blosc/install/include" \
              -DBLOSC_LIBRARY="${DEPS_DIR}/c-blosc/install/lib/libblosc.so" \
              ../CBench;;
    --sz)
      if [ ${CLUSTER} = "cori" ]
      then
        cmake  -DCBENCH_ENABLE_SZ=ON \
              -DSZ_INCLUDE_PATH="${DEPS_DIR}/SZ/sz/include" \
              -DSZ_LIBRARY="${DEPS_DIR}/SZ/install/lib/libSZ.a" \
              -DZLIB_LIBRARY="${DEPS_DIR}/SZ/install/lib/libzlib.a" \
              -DZSTD_LIBRARY="${DEPS_DIR}/SZ/install/lib/libzstd.a" \
              ../CBench
      else
        cmake -DCBENCH_ENABLE_SZ=ON \
              -DSZ_INCLUDE_PATH="${DEPS_DIR}/SZ/sz/include" \
              -DSZ_LIBRARY="${DEPS_DIR}/SZ/install/lib/libSZ.so" \
              -DZLIB_LIBRARY="${DEPS_DIR}/SZ/install/lib/libzlib.so" \
              -DZSTD_LIBRARY="${DEPS_DIR}/SZ/install/lib/libzstd.so" \
              ../CBench
      fi;;
    --zfp)
      if [ ${CLUSTER} = "cori" ]
      then
        cmake -DCBENCH_ENABLE_ZFP=ON \
              -DZFP_INCLUDE_PATH="${DEPS_DIR}/zfp/install/include" \
              -DZFP_LIBRARY="${DEPS_DIR}/zfp/install/lib64/libzfp.a" \
              ../CBench
      else
        cmake -DCBENCH_ENABLE_ZFP=ON \
              -DZFP_INCLUDE_PATH="${DEPS_DIR}/zfp/install/include" \
              -DZFP_LIBRARY="${DEPS_DIR}/zfp/install/lib64/libzfp.so" \
              ../CBench
      fi;;
    --fpzip)
        cmake -DCBENCH_ENABLE_FPZIP=ON \
              -DFPZIP_INCLUDE_PATH="${DEPS_DIR}/fpzip-1.2.0/inc/" \
              -DFPZIP_LIBRARY="${DEPS_DIR}/fpzip-1.2.0/lib/libfpzip.a" \
              ../CBench;;
    --isabela)
        cmake -DCBENCH_ENABLE_ISABELA=ON \
              -DISABELA_INCLUDE_PATH="${DEPS_DIR}/ISABELA-compress-0.2.1/include" \
              -DISABELA_LIBRARY="${DEPS_DIR}/ISABELA-compress-0.2.1/lib/libisabela.a" \
              ../CBench;;
    --lossywave)
      if [ ${CLUSTER} = "darwin" ]; then
        LZ4_LIB="${DEPS_DIR}/VizAly-LossyWave/build/"
        LZ4_LIB+="3rdparty/lz4/lz4-external/src/lz4-external/lib/liblz4.a"

        cmake -DCBENCH_ENABLE_LOSSY_WAVE=ON \
              -DLOSSYWAVE_INCLUDE_PATH="${DEPS_DIR}/VizAly-LossyWave/install/include" \
              -DLOSSYWAVE_LIBRARY="${DEPS_DIR}/VizAly-LossyWave/install/lib/liblossywave.so" \
              -DLOSSYWAVE_LZ4_LIBRARY=${LZ4_LIB} \
              ../CBench
      fi;;
    --mgard)
      if [ ${CLUSTER} = "darwin" ]; then
        cmake -DCBENCH_ENABLE_MGARD=ON \
              -DMGARD_INCLUDE_PATH="${DEPS_DIR}/MGARD/install/include" \
              -DMGARD_LIBRARY="${DEPS_DIR}/MGARD/install/lib/libmgard.so" \
              ../CBench
      fi;;
    (*) echo -e "\e[31mError: invalid argument in build\e[0m"; exit;;
  esac
}

run() {

  BINARY=${BUILD_DIR}/CBench
  INPUT_HACC="${PROJECT_DIR}/testing/scripts/hacc_input.json"
  INPUT_NYX="${PROJECT_DIR}/testing/scripts/nyx_input.json"
  OUTPUT_HACC="${BUILD_DIR}/metrics_HACC_Travis_.csv"
  OUTPUT_NYX="${BUILD_DIR}/metrics_NYX_Travis_.csv"

  if [ "${CLUSTER}" = "darwin" ]
  then
    # run examples
    mpirun -np 4 ${BINARY} ${INPUT_HACC} &&
    mpirun -np 4 ${BINARY} ${INPUT_NYX}

    # view output
    cat ${OUTPUT_HACC} && rm ${OUTPUT_HACC} &&
    cat ${OUTPUT_NYX}  && rm ${OUTPUT_NYX}

  elif [ "${CLUSTER}" = "cori" ]
  then
    SCRIPT="run-hacc"
    echo "#!/bin/bash -l"                          > ${SCRIPT}
    echo "#SBATCH --qos=debug"                    >> ${SCRIPT}
    echo "#SBATCH -N 2"                           >> ${SCRIPT}
    echo "#SBATCH -c 1"                           >> ${SCRIPT}
    echo "#SBATCH --time=2"                       >> ${SCRIPT}
    echo "#SBATCH -A m2848"                       >> ${SCRIPT}
    echo "#SBATCH --constraint=haswell"           >> ${SCRIPT}
    echo ""                                       >> ${SCRIPT}
    echo "export HDF5_USE_FILE_LOCKING=FALSE"     >> ${SCRIPT}
    echo "source ${SCRIPTS_DIR}/${ENV_SCRIPT}"    >> ${SCRIPT}
    echo "cd ${BUILD_DIR}"                        >> ${SCRIPT}
    echo "srun -n 2 -c 1 ${BINARY} ${INPUT_HACC}" >> ${SCRIPT}
    sbatch ${SCRIPT} && rm ${SCRIPT}

    SCRIPT="run-nyx"
    echo "#!/bin/bash -l"                          > ${SCRIPT}
    echo "#SBATCH --qos=debug"                    >> ${SCRIPT}
    echo "#SBATCH -N 2"                           >> ${SCRIPT}
    echo "#SBATCH -c 1"                           >> ${SCRIPT}
    echo "#SBATCH --time=2"                       >> ${SCRIPT}
    echo "#SBATCH -A m2848"                       >> ${SCRIPT}
    echo "#SBATCH --constraint=haswell"           >> ${SCRIPT}
    echo ""                                       >> ${SCRIPT}
    echo "export HDF5_USE_FILE_LOCKING=FALSE"     >> ${SCRIPT}
    echo "source ${SCRIPTS_DIR}/${ENV_SCRIPT}"    >> ${SCRIPT}
    echo "cd ${BUILD_DIR}"                        >> ${SCRIPT}
    echo "srun -n 2 -c 1 ${BINARY} ${INPUT_NYX}"  >> ${SCRIPT}
    sbatch ${SCRIPT} && rm ${SCRIPT} &&

    cd ${BUILD_DIR} &&
    echo "Once batch jobs completed, please check:"
    echo "- slurm-hacc-job.out"
    echo "- slurm-nyx-job.out"
    echo "- metrics_HACC_Travis_.csv"
    echo "- metrics_NYX_Travis_.csv"
  fi
}

# main
parse "$@" &&

echo -e "\e[31mBuild with no options\e[0m" &&
reset && build --core && make &&

echo -e "\e[31mBuild with HDF5 enabled\e[0m" &&
reset && build --hdf5 && make &&

for compressor in ${COMPRESSORS[@]}; do
  echo -e "\e[31mBuild with ${compressor} compressor enabled\e[0m" &&
  reset && build "--${compressor}" && make
done

echo -e "\e[31mBuild with all options using build script\e[0m" &&
reset && build --all && make && run
